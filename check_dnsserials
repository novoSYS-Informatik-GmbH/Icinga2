#!/usr/bin/env bash

#  check_dnsserials is derived from checkserialdns.sh
#  Copyright (C) 2015 Benedikt Heine <benedikt@heine.rocks>
#
#  checkserialdns.sh: checks if your DNS master and slaves are synchronised
#  Copyright (C) 2014 Benedikt Heine <bebe@bebehei.de>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see http://www.gnu.org/licenses/.
#
# checks if your dns-servers are synchronised by
# comparing the serial-number in the domains SOA-RR

export PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
PROGNAME=$(basename $0)
PROGPATH=$(echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,')
REVISION="1.0.2"
COMMAND_DIG=$(command -v dig)

# source a utils.sh from nagios-plugins
# if the check is not executed in the normal check-directory,
# we'll search on common places. This gives us the ability to
# avoid problems with the package-manager
if [[ -r $PROGPATH/utils.sh && -f $PROGPATH/utils.sh ]]; then
	. $PROGPATH/utils.sh
elif [[ -r /usr/lib/nagios/plugins/utils.sh && -f /usr/lib/nagios/plugins/utils.sh ]]; then
	. /usr/lib/nagios/plugins/utils.sh
elif [[ -r /usr/lib/monitoring-plugins/utils.sh && -f /usr/lib/monitoring-plugins/utils.sh ]]; then
	. /usr/lib/monitoring-plugins/utils.sh
else
	echo "Cannot include monitoring plugins' \"utils.sh\"." >&2
	exit 1
fi

debug(){
	if [ $verbose -gt 1 ]; then
		echo "$*"
	fi
}
verbose(){
	if [ $verbose -gt 0 ]; then
		echo "$*"
	fi
}

error(){
	echo "$*" >&2
	exit $STATE_UNKNOWN
}

usage(){
	cat >&2 <<-FIN 
	usage: $PROGNAME -d DOMAIN [-H DNS-MASTER] [ -s SOA-SERIAL] [-w FAILS] [-c FAILS] [ -h -v ]

	DNS-MASTER: The master to get all main informations from
	SOA-SERIAL: The serial number used to compare all DNS slaves (not recommended to set)
	FAILS: The amount of DNS servers allowed having another serial (=> amount of dns servers not in sync) (defaults to 0)

	FIN
	exit $STATE_UNKNOWN
}

master=""
serial=""
verbose=0
fails=0
state=$STATE_UNKNOWN

while getopts ":vhd:H:s:c:w:" opt; do
	case $opt in
		v)
			verbose=$(($verbose + 1))
			;;
		h)
			usage
			;;
		d)
			domain=$OPTARG
			;;
		H)
			master=$OPTARG
			;;
		s)
			serial=$OPTARG
			;;
		c)
			crit=$OPTARG
			;;
		w)
			warn=$OPTARG
			;;
		\?)
			error "Invalid option: -$OPTARG"
			usage
			;;
		:)
			error "Option -$OPTARG requires an argument."
			usage
			;;
	esac
done

if [[ -z "$COMMAND_DIG" ]]; then
	error "No command 'dig' available."
fi

if [[ -z "$domain" ]]; then
	error "No domain specified!"
fi
verbose "domain $domain"

# check warning and critical values
if [ -n "$crit" ] && check_range $crit 0: ; then
	error "Critical value has to be positive."
fi
if [ -n "$warn" ] && check_range $warn 0: ; then
	error "Warning value has to be positive."
fi
if [ -n "$warn" ] && [ -n "$crit" ] && check_range $warn 0:$crit ; then
	error "Warning value has to be lower than critical."
fi

# if no master given, use the standard DNS to determine the master
if [ -z "$master" ]; then
	debug "getting master DNS from system"
	soa=($($COMMAND_DIG +short SOA $domain | cut -d " " -f 1,3))
	master=${soa[0]}
fi
verbose "Master DNS: $master"

# if no serial given, get the master server to determine the serial
if [ -z "$serial" ]; then
	debug "getting master serial from $master"
	soa=($($COMMAND_DIG +short SOA @$master $domain | cut -d " " -f 1,3))
	serial=${soa[1]}
fi
verbose "Master serial: $serial"

# iterate the NS-RRs grabbed from master dns-server for the domain
for server in $($COMMAND_DIG +short NS @$master $domain); do
	debug "getting slave serial from $server"
	serial_slave=$($COMMAND_DIG +short SOA @$server $domain | cut -d " " -f 3)
	if [ "x$serial_slave" = "x$serial" ]; then
		verbose "ok: serial: $serial $domain $server"
		else
			verbose "BAD: $domain $server $serial_slave"
			fails=$(($fails + 1))
			debug "incrementing failed states to $fails"
	fi
done

# interpret the amount of fails
if [[ -n "$warn" && $fails -gt $warn ]]; then
	state=$STATE_WARN
	msg="DNS WARN, master serial: $serial, fails: $fails"
fi
if [[ -n "$crit" && $fails -gt $crit ]]; then
	state=$STATE_CRITICAL
	msg="DNS CRITICAL, master serial: $serial, fails: $fails"
fi
if [[ -z "$crit" && -z "$warn" && $fails -gt 0 ]]; then
	state=$STATE_CRITICAL
	msg="DNS CRITICAL, master serial: $serial, fails: $fails"
	else
		msg="DNS OK, master serial: $serial, fails: $fails"
		state=$STATE_OK
fi

echo $msg
exit $state
